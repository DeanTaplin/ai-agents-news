name: Update AI Agents News

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs at 00:00 every Sunday
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-news:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get current date
      id: date
      run: echo "date=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT

    - name: Update README
      env:
        BRAVE_API_KEY: ${{ secrets.BRAVE_API_KEY }}
      run: |
        # Fetch news from Brave API
        RESPONSE=$(curl -s -H "X-Subscription-Token: $BRAVE_API_KEY" \
          "https://api.search.brave.com/res/v1/web/search?q=AI+agents+autonomous+artificial+intelligence+news&count=20&freshness=pw")
        
        # Create README content
        cat > README.md << EOL
        # AI Agents News Collection

        A curated collection of the latest news and developments in AI agents and autonomous artificial intelligence. Last updated: ${{ steps.date.outputs.date }}

        ## Latest Updates

        EOL
        
        # Create array to track used titles
        declare -a used_titles=()
        
        # Function to check if title is already used
        title_is_used() {
          local title="$1"
          for used_title in "${used_titles[@]}"; do
            if [[ "$used_title" == "$title" ]]; then
              return 0
            fi
          done
          return 1
        }

        # Function to add news item if title is not used
        add_news_item() {
          local title="$1"
          local content="$2"
          if ! title_is_used "$title"; then
            echo "$content" >> README.md
            used_titles+=("$title")
          fi
        }
        
        # Add Major Releases section
        echo "### Major Agent Releases & Improvements" >> README.md
        while IFS= read -r line; do
          if [[ -n "$line" ]]; then
            title=$(echo "$line" | grep -o '#### .*' | sed 's/#### //')
            add_news_item "$title" "$line"
          fi
        done < <(echo "$RESPONSE" | jq -r '.web.results[]? | 
        select(.description != null and (.title + .description | ascii_downcase | test("release|launch|update|new|model|agent|platform"))) | 
        "#### \(.title)\n**Summary:** \(.description)\n\n**Source:** [\(.url | split("/")[2])](\(.url))\n"')

        # Add Innovations section
        echo -e "\n### Notable Innovations" >> README.md
        while IFS= read -r line; do
          if [[ -n "$line" ]]; then
            title=$(echo "$line" | grep -o '#### .*' | sed 's/#### //')
            add_news_item "$title" "$line"
          fi
        done < <(echo "$RESPONSE" | jq -r '.web.results[]? | 
        select(.description != null and (.title + .description | ascii_downcase | test("research|innovation|breakthrough|discover|study|develop"))) | 
        "#### \(.title)\n**Summary:** \(.description)\n\n**Source:** [\(.url | split("/")[2])](\(.url))\n"')

        # Add Market Trends section
        echo -e "\n### Market Trends" >> README.md
        while IFS= read -r line; do
          if [[ -n "$line" ]]; then
            title=$(echo "$line" | grep -o '#### .*' | sed 's/#### //')
            add_news_item "$title" "$line"
          fi
        done < <(echo "$RESPONSE" | jq -r '.web.results[]? | 
        select(.description != null and (.title + .description | ascii_downcase | test("market|industry|business|growth|adoption|trend"))) | 
        "#### \(.title)\n**Summary:** \(.description)\n\n**Source:** [\(.url | split("/")[2])](\(.url))\n"')

        # Add standard sections
        cat >> README.md << 'EOL'

        ## Contributing
        Feel free to submit pull requests with new articles or updates to existing ones. Please ensure all submissions include:
        - Article title
        - Brief summary
        - Source link
        - Date of publication

        ## License
        This repository is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
        EOL

    - name: Commit changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add README.md
        git diff --quiet && git diff --staged --quiet || (git commit -m "docs: update news $(date +'%Y-%m-%d') [skip ci]" && git push)
